AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Splity complete infrastructure - All Lambda functions and API Gateway integration'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod, acceptance]
    Description: Environment name
    
  ClusterHostname:
    Type: String
    Default: ""
    Description: PostgreSQL cluster hostname (will be automatically set by DSQL cluster if empty)
    
  ClusterUsername:
    Type: String
    Default: admin
    Description: PostgreSQL cluster username
    
  ClusterDatabase:
    Type: String
    Default: postgres
    Description: PostgreSQL database name
    
  S3BucketName:
    Type: String
    Default: split-app-v1 # TODO: Add S3 bucket to cloud formation and make it dynamic
    Description: S3 bucket for receipt storage
    
  S3BucketRegion:
    Type: String
    Default: eu-central-1 # TODO: Add S3 bucket to cloud formation and make it dynamic
    Description: S3 bucket region
    
  AllowedOrigins:
    Type: String
    Default: "*"
    Description: CORS allowed origins
    
  DocumentIntelligenceEndpoint:
    Type: String
    Default: https://di-document-reader-test.cognitiveservices.azure.com/
    Description: Azure Document Intelligence endpoint URL
    
  DocumentIntelligenceApiKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: Azure Document Intelligence API key (sensitive parameter)
    
  DsqlClusterDeletionProtection:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Enable deletion protection for Aurora DSQL cluster
    
  CognitoUserPoolId:
    Type: String
    Default: ""
    Description: Cognito User Pool ID for authentication
    
  CognitoClientId:
    Type: String
    Default: ""
    Description: Cognito User Pool Client ID for authentication

Conditions:
  HasCognitoUserPool: !Not [!Equals [!Ref CognitoUserPoolId, ""]]
  HasCognitoClient: !Not [!Equals [!Ref CognitoClientId, ""]]

Resources:
  # NOTE: Parameter Store configuration is handled by scripts/setup-parameter-store.sh
  # This avoids conflicts and provides better interactive configuration for sensitive data

  # Aurora DSQL Cluster
  SplityDsqlCluster:
    Type: AWS::DSQL::Cluster
    Properties:
      DeletionProtectionEnabled: !Ref DsqlClusterDeletionProtection
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Database
        - Key: Name
          Value: !Sub 'splity-dsql-cluster-${Environment}'

  # IAM Role for Lambda Functions
  SplityPartyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SplityPartyLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DsqlPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: DsqlClusterPermissions
                Effect: Allow
                Action:
                  - dsql:GetCluster
                  - dsql:UpdateCluster
                  - dsql:TagResource
                  - dsql:UntagResource
                  - dsql:ListTagsForResource
                  - dsql:DbConnectAdmin
                  - dsql:DbConnect
                Resource: !GetAtt SplityDsqlCluster.ResourceArn
              - Sid: DsqlGeneralPermissions
                Effect: Allow
                Action:
                  - dsql:ListClusters
                Resource: '*'
              - Sid: DsqlConsolePermissions
                Effect: Allow
                Action:
                  - tag:GetTagKeys
                  - tag:GetTagValues
                  - cloudwatch:GetMetricData
                  - ec2:DescribeVpcEndpoints
                  - kms:ListAliases
                  - kms:DescribeKey
                Resource: '*'
              - Sid: KMSCryptographicPermissions
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:ReEncryptTo
                  - kms:ReEncryptFrom
                Resource: '*'
                Condition:
                  StringLike:
                    kms:ViaService:
                      - dsql.*.amazonaws.com
                  ForAnyValue:StringEquals:
                    kms:EncryptionContextKeys: aws:dsql:ClusterId
              - Sid: CreateDsqlServiceLinkedRole
                Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource: '*'
                Condition:
                  StringEquals:
                    iam:AWSServiceName: dsql.amazonaws.com
              - Sid: S3BucketPermissions
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${S3BucketName}'
                  - !Sub 'arn:aws:s3:::${S3BucketName}/*'
              - Sid: ParameterStorePermissions
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/splity/${Environment}/*'
              - Sid: KMSParameterStorePermissions
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/alias/aws/ssm'
                Condition:
                  StringEquals:
                    kms:ViaService:
                      - !Sub 'ssm.${AWS::Region}.amazonaws.com'

  # Lambda Functions (using Node.js placeholders initially)
  # NOTE: Using nodejs18.x runtime with index.handler because dotnet8 runtime
  # does not support inline ZipFile code. The placeholder JavaScript code allows
  # CloudFormation to create the functions, then actual .NET code is deployed
  # later using 'dotnet lambda deploy-function' commands.
  # NOTE 2: Environment variables are set in parameter store to have 1 source.
  SplityCreatePartyFunction:
    Type: AWS::Lambda::Function
    DependsOn: SplityPartyLambdaRole
    Properties:
      FunctionName: !Sub 'SplityCreateParty-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SplityPartyLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
              },
              body: JSON.stringify({
                message: 'Placeholder CreateParty function - deploy .NET code using: dotnet lambda deploy-function --function-name SplityCreateParty-dev'
              })
            };
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CLUSTER_DATABASE: !Ref ClusterDatabase
          CLUSTER_HOSTNAME: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
          CLUSTER_USERNAME: !Ref ClusterUsername
          DSQL_CLUSTER_ARN: !GetAtt SplityDsqlCluster.ResourceArn
          AWS_BUCKET_NAME: !Ref S3BucketName
          AWS_BUCKET_REGION: !Ref S3BucketRegion
          ALLOWED_ORIGINS: !Ref AllowedOrigins
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_CLIENT_ID: !Ref CognitoClientId
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Party

  SplityGetPartyFunction:
    Type: AWS::Lambda::Function
    DependsOn: SplityPartyLambdaRole
    Properties:
      FunctionName: !Sub 'SplityGetParty-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SplityPartyLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
              },
              body: JSON.stringify({
                message: 'Placeholder GetParty function - deploy .NET code using: dotnet lambda deploy-function --function-name SplityGetParty-dev'
              })
            };
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CLUSTER_DATABASE: !Ref ClusterDatabase
          CLUSTER_HOSTNAME: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
          CLUSTER_USERNAME: !Ref ClusterUsername
          DSQL_CLUSTER_ARN: !GetAtt SplityDsqlCluster.ResourceArn
          AWS_BUCKET_NAME: !Ref S3BucketName
          AWS_BUCKET_REGION: !Ref S3BucketRegion
          ALLOWED_ORIGINS: !Ref AllowedOrigins
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Party

  SplityUpdatePartyFunction:
    Type: AWS::Lambda::Function
    DependsOn: SplityPartyLambdaRole
    Properties:
      FunctionName: !Sub 'SplityUpdateParty-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SplityPartyLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'PUT, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
              },
              body: JSON.stringify({
                message: 'Placeholder UpdateParty function - deploy .NET code using: dotnet lambda deploy-function --function-name SplityUpdateParty-dev'
              })
            };
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CLUSTER_DATABASE: !Ref ClusterDatabase
          CLUSTER_HOSTNAME: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
          CLUSTER_USERNAME: !Ref ClusterUsername
          DSQL_CLUSTER_ARN: !GetAtt SplityDsqlCluster.ResourceArn
          AWS_BUCKET_NAME: !Ref S3BucketName
          AWS_BUCKET_REGION: !Ref S3BucketRegion
          ALLOWED_ORIGINS: !Ref AllowedOrigins
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Party

  SplityDeletePartyFunction:
    Type: AWS::Lambda::Function
    DependsOn: SplityPartyLambdaRole
    Properties:
      FunctionName: !Sub 'SplityDeleteParty-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SplityPartyLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'DELETE, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
              },
              body: JSON.stringify({
                message: 'Placeholder DeleteParty function - deploy .NET code using: dotnet lambda deploy-function --function-name SplityDeleteParty-dev'
              })
            };
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CLUSTER_DATABASE: !Ref ClusterDatabase
          CLUSTER_HOSTNAME: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
          CLUSTER_USERNAME: !Ref ClusterUsername
          DSQL_CLUSTER_ARN: !GetAtt SplityDsqlCluster.ResourceArn
          AWS_BUCKET_NAME: !Ref S3BucketName
          AWS_BUCKET_REGION: !Ref S3BucketRegion
          ALLOWED_ORIGINS: !Ref AllowedOrigins
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Party

  SplityGetPartiesFunction:
    Type: AWS::Lambda::Function
    DependsOn: SplityPartyLambdaRole
    Properties:
      FunctionName: !Sub 'SplityGetParties-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SplityPartyLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization'
              },
              body: JSON.stringify({
                message: 'Placeholder GetParties function - deploy .NET code using: dotnet lambda deploy-function --function-name SplityGetParties-dev'
              })
            };
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CLUSTER_DATABASE: !Ref ClusterDatabase
          CLUSTER_HOSTNAME: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
          CLUSTER_USERNAME: !Ref ClusterUsername
          DSQL_CLUSTER_ARN: !GetAtt SplityDsqlCluster.ResourceArn
          AWS_BUCKET_NAME: !Ref S3BucketName
          AWS_BUCKET_REGION: !Ref S3BucketRegion
          ALLOWED_ORIGINS: !Ref AllowedOrigins
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_CLIENT_ID: !Ref CognitoClientId
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Party

  # Expenses Lambda Functions
  SplityCreateExpensesFunction:
    Type: AWS::Lambda::Function
    DependsOn: SplityPartyLambdaRole
    Properties:
      FunctionName: !Sub 'SplityCreateExpenses-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SplityPartyLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
              },
              body: JSON.stringify({
                message: 'Placeholder CreateExpenses function - deploy .NET code using: dotnet lambda deploy-function --function-name SplityCreateExpenses-dev'
              })
            };
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CLUSTER_DATABASE: !Ref ClusterDatabase
          CLUSTER_HOSTNAME: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
          CLUSTER_USERNAME: !Ref ClusterUsername
          DSQL_CLUSTER_ARN: !GetAtt SplityDsqlCluster.ResourceArn
          AWS_BUCKET_NAME: !Ref S3BucketName
          AWS_BUCKET_REGION: !Ref S3BucketRegion
          ALLOWED_ORIGINS: !Ref AllowedOrigins
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Expenses

  SplityDeleteExpensesFunction:
    Type: AWS::Lambda::Function
    DependsOn: SplityPartyLambdaRole
    Properties:
      FunctionName: !Sub 'SplityDeleteExpenses-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SplityPartyLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'DELETE, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
              },
              body: JSON.stringify({
                message: 'Placeholder DeleteExpenses function - deploy .NET code using: dotnet lambda deploy-function --function-name SplityDeleteExpenses-dev'
              })
            };
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CLUSTER_DATABASE: !Ref ClusterDatabase
          CLUSTER_HOSTNAME: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
          CLUSTER_USERNAME: !Ref ClusterUsername
          DSQL_CLUSTER_ARN: !GetAtt SplityDsqlCluster.ResourceArn
          AWS_BUCKET_NAME: !Ref S3BucketName
          AWS_BUCKET_REGION: !Ref S3BucketRegion
          ALLOWED_ORIGINS: !Ref AllowedOrigins
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Expenses

  SplityExtractExpensesFunction:
    Type: AWS::Lambda::Function
    DependsOn: SplityPartyLambdaRole
    Properties:
      FunctionName: !Sub 'SplityExtractExpenses-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SplityPartyLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'PUT, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
              },
              body: JSON.stringify({
                message: 'Placeholder ExtractExpenses function - deploy .NET code using: dotnet lambda deploy-function --function-name SplityExtractExpenses-dev'
              })
            };
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CLUSTER_DATABASE: !Ref ClusterDatabase
          CLUSTER_HOSTNAME: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
          CLUSTER_USERNAME: !Ref ClusterUsername
          DSQL_CLUSTER_ARN: !GetAtt SplityDsqlCluster.ResourceArn
          AWS_BUCKET_NAME: !Ref S3BucketName
          AWS_BUCKET_REGION: !Ref S3BucketRegion
          ALLOWED_ORIGINS: !Ref AllowedOrigins
          DOCUMENT_INTELLIGENCE_ENDPOINT: !Ref DocumentIntelligenceEndpoint
          DOCUMENT_INTELLIGENCE_API_KEY: !Ref DocumentIntelligenceApiKey
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Expenses

  # User Lambda Functions
  SplityCreateUserFunction:
    Type: AWS::Lambda::Function
    DependsOn: SplityPartyLambdaRole
    Properties:
      FunctionName: !Sub 'SplityCreateUser-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SplityPartyLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
              },
              body: JSON.stringify({
                message: 'Placeholder CreateUser function - deploy .NET code using: dotnet lambda deploy-function --function-name SplityCreateUser-dev'
              })
            };
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CLUSTER_DATABASE: !Ref ClusterDatabase
          CLUSTER_HOSTNAME: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
          CLUSTER_USERNAME: !Ref ClusterUsername
          DSQL_CLUSTER_ARN: !GetAtt SplityDsqlCluster.ResourceArn
          AWS_BUCKET_NAME: !Ref S3BucketName
          AWS_BUCKET_REGION: !Ref S3BucketRegion
          ALLOWED_ORIGINS: !Ref AllowedOrigins
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Users

  SplityGetUserFunction:
    Type: AWS::Lambda::Function
    DependsOn: SplityPartyLambdaRole
    Properties:
      FunctionName: !Sub 'SplityGetUser-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SplityPartyLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
              },
              body: JSON.stringify({
                message: 'Placeholder GetUser function - deploy .NET code using: dotnet lambda deploy-function --function-name SplityGetUser-dev'
              })
            };
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CLUSTER_DATABASE: !Ref ClusterDatabase
          CLUSTER_HOSTNAME: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
          CLUSTER_USERNAME: !Ref ClusterUsername
          DSQL_CLUSTER_ARN: !GetAtt SplityDsqlCluster.ResourceArn
          AWS_BUCKET_NAME: !Ref S3BucketName
          AWS_BUCKET_REGION: !Ref S3BucketRegion
          ALLOWED_ORIGINS: !Ref AllowedOrigins
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Users

  SplityUpdateUserFunction:
    Type: AWS::Lambda::Function
    DependsOn: SplityPartyLambdaRole
    Properties:
      FunctionName: !Sub 'SplityUpdateUser-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt SplityPartyLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'PUT, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
              },
              body: JSON.stringify({
                message: 'Placeholder UpdateUser function - deploy .NET code using: dotnet lambda deploy-function --function-name SplityUpdateUser-dev'
              })
            };
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CLUSTER_DATABASE: !Ref ClusterDatabase
          CLUSTER_HOSTNAME: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
          CLUSTER_USERNAME: !Ref ClusterUsername
          DSQL_CLUSTER_ARN: !GetAtt SplityDsqlCluster.ResourceArn
          AWS_BUCKET_NAME: !Ref S3BucketName
          AWS_BUCKET_REGION: !Ref S3BucketRegion
          ALLOWED_ORIGINS: !Ref AllowedOrigins
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Splity
        - Key: Entity
          Value: Users

  # API Gateway HTTP API
  SplityPartyApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'SplityApi-${Environment}'
      ProtocolType: HTTP
      Description: 'API Gateway for Splity - Complete serverless expense sharing application'
      CorsConfiguration:
        AllowCredentials: false
        AllowHeaders:
          - content-type
          - x-amz-date
          - authorization
          - x-api-key
          - x-amz-security-token
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowOrigins:
          - !Ref AllowedOrigins
        MaxAge: 86400
      Tags:
        Environment: !Ref Environment
        Service: Splity
        Entity: Complete

  # API Gateway Stage
  SplityPartyApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref SplityPartyApi
      StageName: !Ref Environment
      AutoDeploy: true
      Description: !Sub 'Stage for ${Environment} environment'
      Tags:
        Environment: !Ref Environment
        Service: Splity
        Entity: Party

  # Lambda Permissions for API Gateway (Simplified)
  CreatePartyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplityCreatePartyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SplityPartyApi}/*/*'

  GetPartyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplityGetPartyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SplityPartyApi}/*/*'

  UpdatePartyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplityUpdatePartyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SplityPartyApi}/*/*'

  DeletePartyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplityDeletePartyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SplityPartyApi}/*/*'

  GetPartiesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplityGetPartiesFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SplityPartyApi}/*/*'

  # Expenses Lambda Permissions
  CreateExpensesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplityCreateExpensesFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SplityPartyApi}/*/*'

  DeleteExpensesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplityDeleteExpensesFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SplityPartyApi}/*/*'

  ExtractExpensesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplityExtractExpensesFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SplityPartyApi}/*/*'

  # User Lambda Permissions
  CreateUserLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplityCreateUserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SplityPartyApi}/*/*'

  GetUserLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplityGetUserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SplityPartyApi}/*/*'

  UpdateUserLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplityUpdateUserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SplityPartyApi}/*/*'

  # API Gateway Integrations
  CreatePartyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: CreatePartyLambdaPermission
    Properties:
      ApiId: !Ref SplityPartyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplityCreatePartyFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
      Description: 'Create party integration'

  GetPartyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: GetPartyLambdaPermission
    Properties:
      ApiId: !Ref SplityPartyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplityGetPartyFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
      Description: 'Get party integration'

  UpdatePartyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: UpdatePartyLambdaPermission
    Properties:
      ApiId: !Ref SplityPartyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplityUpdatePartyFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
      Description: 'Update party integration'

  DeletePartyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: DeletePartyLambdaPermission
    Properties:
      ApiId: !Ref SplityPartyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplityDeletePartyFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
      Description: 'Delete party integration'

  GetPartiesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: GetPartiesLambdaPermission
    Properties:
      ApiId: !Ref SplityPartyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplityGetPartiesFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
      Description: 'Get parties integration'

  # Expenses API Gateway Integrations
  CreateExpensesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: CreateExpensesLambdaPermission
    Properties:
      ApiId: !Ref SplityPartyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplityCreateExpensesFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
      Description: 'Create expenses integration'

  DeleteExpensesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: DeleteExpensesLambdaPermission
    Properties:
      ApiId: !Ref SplityPartyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplityDeleteExpensesFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
      Description: 'Delete expenses integration'

  ExtractExpensesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: ExtractExpensesLambdaPermission
    Properties:
      ApiId: !Ref SplityPartyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplityExtractExpensesFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
      Description: 'Extract expenses integration'

  # Users API Gateway Integrations
  CreateUserIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: CreateUserLambdaPermission
    Properties:
      ApiId: !Ref SplityPartyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplityCreateUserFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
      Description: 'Create user integration'

  GetUserIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: GetUserLambdaPermission
    Properties:
      ApiId: !Ref SplityPartyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplityGetUserFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
      Description: 'Get user integration'

  UpdateUserIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: UpdateUserLambdaPermission
    Properties:
      ApiId: !Ref SplityPartyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplityUpdateUserFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
      Description: 'Update user integration'

  # API Gateway Routes
  CreatePartyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SplityPartyApi
      RouteKey: 'POST /party'
      Target: !Sub 'integrations/${CreatePartyIntegration}'

  GetPartyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SplityPartyApi
      RouteKey: 'GET /party/{id}'
      Target: !Sub 'integrations/${GetPartyIntegration}'

  UpdatePartyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SplityPartyApi
      RouteKey: 'PUT /party/{id}'
      Target: !Sub 'integrations/${UpdatePartyIntegration}'

  DeletePartyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SplityPartyApi
      RouteKey: 'DELETE /party/{id}'
      Target: !Sub 'integrations/${DeletePartyIntegration}'

  GetPartiesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SplityPartyApi
      RouteKey: 'GET /parties'
      Target: !Sub 'integrations/${GetPartiesIntegration}'

  # Expenses API Gateway Routes
  CreateExpensesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SplityPartyApi
      RouteKey: 'POST /expenses'
      Target: !Sub 'integrations/${CreateExpensesIntegration}'

  DeleteExpensesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SplityPartyApi
      RouteKey: 'DELETE /expenses'
      Target: !Sub 'integrations/${DeleteExpensesIntegration}'

  ExtractExpensesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SplityPartyApi
      RouteKey: 'PUT /party/{partyId}/extract'
      Target: !Sub 'integrations/${ExtractExpensesIntegration}'

  # Users API Gateway Routes
  CreateUserRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SplityPartyApi
      RouteKey: 'POST /users'
      Target: !Sub 'integrations/${CreateUserIntegration}'

  GetUserRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SplityPartyApi
      RouteKey: 'GET /users/{id}'
      Target: !Sub 'integrations/${GetUserIntegration}'

  UpdateUserRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SplityPartyApi
      RouteKey: 'PUT /users/{id}'
      Target: !Sub 'integrations/${UpdateUserIntegration}'

Outputs:
  # API Gateway Outputs
  ApiGatewayUrl:
    Description: 'API Gateway endpoint URL for Party operations'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  ApiGatewayId:
    Description: 'API Gateway ID'
    Value: !Ref SplityPartyApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'

  # Lambda Function Outputs
  CreatePartyFunctionArn:
    Description: 'Create Party Lambda Function ARN'
    Value: !GetAtt SplityCreatePartyFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CreatePartyFunctionArn'

  GetPartyFunctionArn:
    Description: 'Get Party Lambda Function ARN'
    Value: !GetAtt SplityGetPartyFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-GetPartyFunctionArn'

  UpdatePartyFunctionArn:
    Description: 'Update Party Lambda Function ARN'
    Value: !GetAtt SplityUpdatePartyFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-UpdatePartyFunctionArn'

  DeletePartyFunctionArn:
    Description: 'Delete Party Lambda Function ARN'
    Value: !GetAtt SplityDeletePartyFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DeletePartyFunctionArn'

  GetPartiesFunctionArn:
    Description: 'Get Parties Lambda Function ARN'
    Value: !GetAtt SplityGetPartiesFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-GetPartiesFunctionArn'

  # IAM Role Output
  LambdaRoleArn:
    Description: 'Lambda execution role ARN'
    Value: !GetAtt SplityPartyLambdaRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRoleArn'

  # API Endpoints for Testing
  CreatePartyEndpoint:
    Description: 'POST endpoint to create a party'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/party'

  GetPartyEndpoint:
    Description: 'GET endpoint to retrieve a party'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/party/{id}'

  UpdatePartyEndpoint:
    Description: 'PUT endpoint to update a party'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/party/{id}'

  DeletePartyEndpoint:
    Description: 'DELETE endpoint to delete a party'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/party/{id}'

  GetPartiesEndpoint:
    Description: 'GET endpoint to retrieve all parties for authenticated user'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/parties'

  # Expenses Function Outputs
  CreateExpensesFunctionArn:
    Description: 'Create Expenses Lambda Function ARN'
    Value: !GetAtt SplityCreateExpensesFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CreateExpensesFunctionArn'

  DeleteExpensesFunctionArn:
    Description: 'Delete Expenses Lambda Function ARN'
    Value: !GetAtt SplityDeleteExpensesFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DeleteExpensesFunctionArn'

  ExtractExpensesFunctionArn:
    Description: 'Extract Expenses Lambda Function ARN'
    Value: !GetAtt SplityExtractExpensesFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ExtractExpensesFunctionArn'

  # Users Function Outputs
  CreateUserFunctionArn:
    Description: 'Create User Lambda Function ARN'
    Value: !GetAtt SplityCreateUserFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CreateUserFunctionArn'

  GetUserFunctionArn:
    Description: 'Get User Lambda Function ARN'
    Value: !GetAtt SplityGetUserFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-GetUserFunctionArn'

  UpdateUserFunctionArn:
    Description: 'Update User Lambda Function ARN'
    Value: !GetAtt SplityUpdateUserFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-UpdateUserFunctionArn'

  # Expenses API Endpoints
  CreateExpensesEndpoint:
    Description: 'POST endpoint to create expenses'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/expenses'

  DeleteExpensesEndpoint:
    Description: 'DELETE endpoint to delete expenses'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/expenses'

  ExtractExpensesEndpoint:
    Description: 'PUT endpoint to extract expenses from receipt'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/party/{partyId}/extract'

  # Users API Endpoints
  CreateUserEndpoint:
    Description: 'POST endpoint to create a user'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/users'

  GetUserEndpoint:
    Description: 'GET endpoint to retrieve a user'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/users/{id}'

  UpdateUserEndpoint:
    Description: 'PUT endpoint to update a user'
    Value: !Sub 'https://${SplityPartyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/users/{id}'

  # Aurora DSQL Cluster Outputs
  DsqlClusterArn:
    Description: 'Aurora DSQL Cluster ARN'
    Value: !GetAtt SplityDsqlCluster.ResourceArn
    Export:
      Name: !Sub '${AWS::StackName}-DsqlClusterArn'
      
  DsqlClusterEndpoint:
    Description: 'Aurora DSQL Cluster Endpoint'
    Value: !Sub '${SplityDsqlCluster}.dsql.${AWS::Region}.on.aws'
    Export:
      Name: !Sub '${AWS::StackName}-DsqlClusterEndpoint'
      
  DsqlClusterIdentifier:
    Description: 'Aurora DSQL Cluster Identifier'
    Value: !Ref SplityDsqlCluster
    Export:
      Name: !Sub '${AWS::StackName}-DsqlClusterIdentifier'
